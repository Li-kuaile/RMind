{"version":3,"file":"static/js/44.e2c84e45.chunk.js","mappings":"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","sources":["methods/mindmapExporter.js","components/Popup/subComponents/Export.js"],"sourcesContent":["const exportNodeToText = (node, layer, format) => {\r\n    switch (format) {\r\n        case 'MD':\r\n            if (layer < 6) {\r\n                return '#'.repeat(layer + 1) + ' ' + node.text;\r\n            }\r\n            return '\\t'.repeat(layer - 6) + '- ' + node.text;\r\n        case 'TXT':\r\n            return '\\t'.repeat(layer) + node.text;\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nconst exportMindmapToText = (mindmap, format) => {\r\n    let lines = [];\r\n    const dfs = (node, layer, format) => {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        lines.push(exportNodeToText(node, layer, format));\r\n        node.children.forEach(child => {\r\n            dfs(child, layer + 1, format)\r\n        });\r\n    };\r\n    dfs(mindmap, 0, format);\r\n    return lines.join('\\n');\r\n};\r\n\r\nconst copyNodeData = (format, target_node, source_node) => {\r\n    switch (format) {\r\n        case 'KM':\r\n            target_node.data = {};\r\n            target_node.data.id = source_node.id;\r\n            target_node.data.created = Date.now();\r\n            target_node.data.text = source_node.text;\r\n            target_node.data.expandState = source_node.showChildren ? 'expand' : 'collapse';\r\n            target_node.children = source_node.children.map(child => copyNodeData(format, {}, child));\r\n            return target_node;\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nconst exportMindmapToJSON = (mindmap, format) => {\r\n    switch (format) {\r\n        case 'KM':\r\n            const km_mindmap = {root: copyNodeData(format, {}, mindmap)};\r\n            return JSON.stringify(km_mindmap);\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport default (mindmap, format) => {\r\n    let export_data;\r\n    switch (format) {\r\n        case 'MD':\r\n        case 'TXT':\r\n            export_data = exportMindmapToText(mindmap, format);\r\n            break;\r\n        default:\r\n            export_data = exportMindmapToJSON(mindmap, format);\r\n            break;\r\n    }\r\n    return export_data;\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {css} from 'emotion';\r\nimport {context} from '../../../context';\r\nimport useMindmap from '../../../customHooks/useMindmap';\r\nimport * as refer from '../../../statics/refer';\r\nimport html2canvas from 'html2canvas';\r\nimport {downloadFile} from '../../../methods/assistFunctions';\r\nimport mindmapExporter from '../../../methods/mindmapExporter';\r\nimport {Highlight, ButtonSet} from '../common/styledComponents';\r\n\r\nconst Export = ({handleClosePopup}) => {\r\n    const {mindmap: {state: mindmap}, global: {state: {title}}} = useContext(context);\r\n    const {clearNodeStatus} = useMindmap();\r\n\r\n    const handleExportPNG = () => {\r\n        clearNodeStatus(); // 防止选中状态时的工具条等也被导出到图像\r\n        html2canvas(document.getElementById(refer.MINDMAP_ID)).then(canvas => {\r\n            let url = canvas.toDataURL('image/png');\r\n            downloadFile(url, `${title}.png`);\r\n        });\r\n    };\r\n\r\n    const handleExportText = format => {\r\n        const data = mindmapExporter(mindmap, format);\r\n        let url = `data:text/plain,${encodeURIComponent(data)}`;\r\n        downloadFile(url, `${title}.${format.toLowerCase()}`);\r\n    };\r\n\r\n    return (<div>\r\n        <Highlight>请选择导出格式：</Highlight>\r\n        <ul className={list_wrapper}>\r\n            <li onClick={handleExportPNG}><i className={'zwicon-file-image'} />PNG 图片（.png）</li>\r\n            <li onClick={() => { handleExportText('KM'); }}><i className={'zwicon-file-pdf'} />百度脑图（.km）</li>\r\n            <li onClick={() => { handleExportText('MD'); }}><i className={'zwicon-file-table'} />Markdown（.md）</li>\r\n            <li onClick={() => { handleExportText('TXT'); }}><i className={'zwicon-file-font'} />文本文件（.txt）</li>\r\n        </ul>\r\n        <ButtonSet>\r\n            <button onClick={handleClosePopup}>完成</button>\r\n        </ButtonSet>\r\n    </div>);\r\n};\r\n\r\nexport default Export;\r\n\r\n// CSS\r\nconst list_wrapper = css`\r\npadding: 0;\r\nlist-style: none;\r\n\r\nli {\r\npadding: 5px 0 5px 5px;\r\nborder-left: 3px solid transparent;\r\nborder-bottom: 1px solid #dddddd;\r\nline-height: 30px;\r\ncursor: pointer;\r\n}\r\n\r\nli:last-of-type {\r\nborder-bottom: none;\r\n}\r\n\r\nli:hover {\r\nborder-left: 3px solid var(${refer.THEME_EX});\r\n}\r\n\r\nli i {\r\nmargin-right: 10px;\r\nfont-size: 30px;\r\n}\r\n`;"],"names":["copyNodeData","format","target_node","source_node","data","id","created","Date","now","text","expandState","showChildren","children","map","child","mindmap","export_data","exportMindmapToText","lines","dfs","node","layer","push","exportNodeToText","repeat","forEach","join","exportMindmapToJSON","km_mindmap","root","JSON","stringify","_ref","handleClosePopup","state","global","title","useContext","context","clearNodeStatus","useMindmap","handleExportText","mindmapExporter","url","concat","encodeURIComponent","downloadFile","toLowerCase","_jsxs","_jsx","Highlight","className","list_wrapper","onClick","handleExportPNG","html2canvas","document","getElementById","refer","then","canvas","toDataURL","ButtonSet","css","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}